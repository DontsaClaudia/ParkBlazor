@using ParkBlazor.Models
@if (IsOpen)
{
    <div class="modal show" tabindex="-1" style="display: block; background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header" style="background: linear-gradient(to left, #ff5f6d, #ffc371);">
                    <h5 class="modal-title">@ModalTitle</h5>
                    <button type="button" class="close" @onclick="Close"><span>&times;</span></button>
                </div>
                <div class="modal-body">
                    <div class="form-group">
                        <label for="name">Name</label>
                        <input type="text" class="form-control" id="name" @bind="Park.Name" />
                    </div>
                    <div class="form-group">
                        <label for="address">Address</label>
                        <input type="text" class="form-control" id="address" @bind="Park.Address" />
                    </div>
                    <div class="form-group">
                        <label for="createdOn">Created On</label>
                        <input type="date" class="form-control" id="createdOn" @bind="Park.CreateDate" />
                    </div>
                </div>
                <div class="modal-footer">
                    <button class="btn btn-primary" @onclick="Save">Save Changes</button>
                    <button class="btn btn-secondary" @onclick="Close">Close</button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    [Parameter]
    public bool IsOpen { get; set; }

    [Parameter]
    public Parks Park { get; set; }

    [Parameter]
    public string ModalTitle { get; set; }

    [Parameter]
    public EventCallback<bool> OnClose { get; set; }

    void Close()
    {
        OnClose.InvokeAsync(false);
    }

    async Task Save()
    {
        // Call service to save the park, then close
        OnClose.InvokeAsync(true);
    }
}