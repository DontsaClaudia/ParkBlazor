@page "/adduser"
@page "/edituser/{id:int}"
@using ParkBlazor.Models
@using ParkBlazor.Services
@inject UsersService UserService
@inject NavigationManager Navigation
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage

<h3>@(id == 0 ? "Add New User" : "Edit User")</h3>

<EditForm Model="@user" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="form-group">
        <label for="firstname">Firstname</label>
        <InputText id="firstname" @bind-Value="user.Firstname" class="form-control" />
    </div>
    <div class="form-group">
        <label for="lastname">Lastname</label>
        <InputText id="lastname" @bind-Value="user.Lastname" class="form-control" />
    </div>
    <div class="form-group">
        <label for="email">Email</label>
        <InputText id="email" @bind-Value="user.Email" class="form-control" />
    </div>
    <div class="form-group">
        <label for="phoneNumber">Phone</label>
        <InputText id="phoneNumber" @bind-Value="user.PhoneNumber" class="form-control" />
    </div>
    <div class="form-group">
        <label for="role">Role</label>
        <select id="role" @bind="user.Rulesid" class="form-control">
            <option value="">Select Role</option>
            @foreach (var role in roles)
            {
                <option value="@role.Id">@role.Name</option>
            }
        </select>
    </div>
    <button type="submit" class="btn btn-primary">Save</button>
</EditForm>

@code {
    [Parameter] public int id { get; set; }
    private Users user = new Users();
    private List<Rules> roles = new List<Rules>();
    private bool isInitialized;

    protected override async Task OnInitializedAsync()
    {
        // Removed InitializeAuthorization from here
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && !isInitialized)
        {
            await InitializeAuthorization();
            roles = await UserService.GetRolesAsync();

            if (id != 0)
            {
                user = await UserService.GetUserByIdAsync(id);
            }
            isInitialized = true;
            StateHasChanged();
        }
    }

    private async Task InitializeAuthorization()
    {
        var token = await LocalStorage.GetItemAsync<string>("authToken");
        if (!string.IsNullOrEmpty(token))
        {
            await UserService.SetAuthorizationHeader(token);
        }
    }

    private async Task HandleValidSubmit()
    {
        if (id == 0)
        {
            await UserService.AddUserAsync(user);
        }
        else
        {
            await UserService.UpdateUserAsync(user);
        }
        Navigation.NavigateTo("/users");
    }
}