
@page "/computers"
@using ParkBlazor.Models
@using ParkBlazor.Services
@inject ComputersService ComputerService

<style>
    .modal-content, .table, button {
        border-radius: 8px; /* Bordures arrondies pour les modaux, tables et boutons */
        box-shadow: 0 4px 8px rgba(0,0,0,0.1); /* Ombre pour les éléments */
    }

    .modal-backdrop {
        display: block; /* Assure que l'arrière-plan sombre s'affiche même sans JS */
        opacity: 0.5 !important; /* Plus de transparence */
    }

    .modal.show .modal-dialog {
        transform: translate(0, 0); /* Ajustement pour les animations ou transitions */
    }

    .btn-primary, .btn-success, .btn-danger {
        border: none; /* Retire les bordures par défaut des boutons pour un look plus épuré */
    }

    .btn:hover {
        opacity: 0.85; /* Effet au survol pour les boutons */
        box-shadow: 0 4px 12px rgba(0,0,0,0.2); /* Ombre plus prononcée au survol */
    }

    .table {
        background-color: #ffffff; /* Fond blanc pour la table pour mieux ressortir sur fond clair */
    }

        .table thead.thead-dark th {
            background: linear-gradient(to right, #343a40, #1c1e22); /* Gradient pour l'en-tête de la table */
            color: white;
        }
</style>

<h3 class="text-center p-3" style="background: linear-gradient(to right, #6a11cb 0%, #2575fc 100%); color: white;">Computers</h3>

<div class="container">
    <button class="btn btn-success my-2" @onclick="() => ShowModal(0)">Add New Computer</button>

    <table class="table table-hover">
        <thead class="thead-dark">
            <tr>
                <th>Name </th>
                <th>Maker</th>
                <th>Description</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
        @foreach (var computer in computers)
        {
            <tr>
                <td>@computer.Name</td>
                <td>@computer.Maker</td>
                <td>@computer.Description</td>
                <td>
                    <button class="btn btn-primary" @onclick="() => ShowModal(computer.Id)">Edit</button>
                    <button class="btn btn-danger" @onclick="() => ConfirmDelete(computer.Id)">Delete</button>
                </td>
            </tr>
        }
        </tbody>
    </table>
</div>

@* Modals here *@
<EditComputerModal ModalTitle="Computer Details" IsOpen="@isModalOpen" Computer="@selectedComputer" OnClose="HandleModalClose" />

@code {
    private List<Computers> computers = new List<Computers>();
    private bool isModalOpen = false;
    private Computers selectedComputer = new Computers();

    protected override async Task OnInitializedAsync()
    {
        computers = await ComputerService.GetAllComputersAsync();
    }

    void ShowModal(int id)
    {
        if (id == 0)
        {
            selectedComputer = new Computers(); // For add new
        }
        else
        {
            selectedComputer = computers.FirstOrDefault(c => c.Id == id);
        }
        isModalOpen = true;
    }

    void HandleModalClose(bool isChanged)
    {
        if (isChanged)
        {
            // Refresh computers list or handle the change
        }
        isModalOpen = false;
    }

    void ConfirmDelete(int id)
    {
        // Show confirmation dialog before deleting
        // If confirmed, call ComputerService.DeleteComputerAsync(id)
    }
}