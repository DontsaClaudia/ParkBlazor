@page "/"
@using ParkBlazor.Services
@layout LoginLayout
@inject AuthenticationService AuthenticationService
@inject NavigationManager Navigation
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage

<div class="login-container">
    <div class="form-container">
        <form @onsubmit="HandleLogin">
            <h2>Let's login to your Tour Planning account first</h2>
            <div class="form-group">
                <label for="email">Email</label>
                <input type="email" id="email" placeholder="Email" @bind="loginEmail" class="form-control" />
            </div>
            <div class="form-group">
                <label for="password">Password</label>
                <input type="password" id="password" placeholder="Password" @bind="loginPassword" class="form-control" />
            </div>
            <div class="options">
                <label>
                    <input type="checkbox" /> Remember me
                </label>
                <a href="#">Forgot Password?</a>
            </div>
            <button type="submit" class="btn-login" @onclick ="HandleLogin">Log In</button>
            <div class="social-login">
                <p>or sign in with</p>
                <div class="social-icons">
                    <a href="#"><img src="css/images/google.png" alt="Google" /></a>
                    <a href="#"><img src="css/images/twitter.png" alt="Twitter" /></a>
                    <a href="#"><img src="css/images/facebook.png" alt="Facebook" /></a>
                </div>
            </div>
            <div class="signup-link">
                <p>Don't have an account? <a href="#">Signup</a></p>
            </div>
        </form>
    </div>
</div>

@code {
    private string loginEmail;
    private string loginPassword;

    private async Task HandleLogin()
    {
        if (string.IsNullOrWhiteSpace(loginEmail) || string.IsNullOrWhiteSpace(loginPassword))
        {
            // Show validation message
            return;
        }

        var isSuccess = await AuthenticationService.Login(loginEmail, loginPassword);
        if (isSuccess)
        {
            Navigation.NavigateTo("/welcome");
        }
        else
        {
            // Show login failure message
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var token = await LocalStorage.GetItemAsync<string>("authToken");
            if (!string.IsNullOrEmpty(token))
            {
                await AuthenticationService.SetTokenAsync(token);
            }
        }
    }
}