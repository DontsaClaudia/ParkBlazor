@page "/parkspage"
@using ParkBlazor.Models
@using ParkBlazor.Services
@inject ParksService ParkService

<style>
    .modal-content, .table, button {
        border-radius: 8px; /* Bordures arrondies pour les modaux, tables et boutons */
        box-shadow: 0 4px 8px rgba(0,0,0,0.1); /* Ombre pour les éléments */
    }

    .modal-backdrop {
        display: block; /* Assure que l'arrière-plan sombre s'affiche même sans JS */
        opacity: 0.5 !important; /* Plus de transparence */
    }

    .modal.show .modal-dialog {
        transform: translate(0, 0); /* Ajustement pour les animations ou transitions */
    }

    .btn-primary, .btn-success, .btn-danger {
        border: none;
    }

    .btn:hover {
        opacity: 0.85; 
        box-shadow: 0 4px 12px rgba(0,0,0,0.2); 
    }

    .btn-save {
        background-color: #FA8519;
        color: white;
    }

    .btn-close, .btn-add-new {
        background-color: #0b8699;
        color: white;
    }

        .btn-save:hover, .btn-close:hover, .btn-add-new:hover {
            opacity: 0.85;
            box-shadow: 0 4px 12px rgba(0,0,0,0.2);
        }

    .table {
        background-color: #ffffff; /* Fond blanc pour la table pour mieux ressortir sur fond clair */
    }

        .table thead.thead-dark th {
            background: linear-gradient(to right, #343a40, #1c1e22); /* Gradient pour l'en-tête de la table */
            color: white;
        }

    .gradient-bg {
        background: linear-gradient(to right, #0b8699, #FA8519); /* Gradient pour l'en-tête de la page */
        color: white;
    }

    .border-radius {
        border-radius: 8px;
    }

    .box-shadow {
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
    }
</style>

<h3 class="text-center p-3 gradient-bg border-radius">Parks Page</h3>

<div class="container">
    <button class="btn btn-add-new my-2 border-radius " @onclick="() => ShowModal(0)">Add New Park</button>

    <table class="table table-hover border-radius">
        <thead class="thead-dark">
            <tr>
                <th>Name</th>
                <th>Address</th>
                <th>Created On</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
        @foreach (var park in parks)
        {
            <tr>
                <td>@park.Name</td>
                <td>@park.Address</td>
                <td>@park.CreateDate.ToShortDateString()</td>
                <td>
                        <button class="btn btn-primary border-radius" @onclick="() => ShowModal(park.Id)">Edit</button>
                        <button class="btn btn-danger border-radius" @onclick="() => ConfirmDelete(park.Id)">Delete</button>
                </td>
            </tr>
        }
        </tbody>
    </table>
</div>

@* Modals here *@
<EditParkModal ModalTitle="Park Details" IsOpen="@isModalOpen" Park="@selectedPark" OnClose="HandleModalClose" />

@code {
    private List<Parks> parks = new List<Parks>();
    private bool isModalOpen = false;
    private Parks selectedPark = new Parks();

    protected override async Task OnInitializedAsync()
    {
        parks = await ParkService.GetAllParksAsync();
    }

    void ShowModal(int id)
    {
        if (id == 0)
        {
            selectedPark = new Parks(); // For add new
        }
        else
        {
            selectedPark = parks.FirstOrDefault(p => p.Id == id);
        }
        isModalOpen = true;
    }

    void HandleModalClose(bool isChanged)
    {
        if (isChanged)
        {
            // Refresh parks list or handle the change
        }
        isModalOpen = false;
    }

    void ConfirmDelete(int id)
    {
        // Show confirmation dialog before deleting
        // If confirmed, call ParkService.DeleteParkAsync(id)
    }
}