@page "/rooms"
@using ParkBlazor.Models
@using ParkBlazor.Services
@using System.Net
@inject RoomsService RoomService
@inject IJSRuntime JSRuntime

<style>
    .modal-content, .table, button {
        border-radius: 8px; /* Bordures arrondies pour les modaux, tables et boutons */
        box-shadow: 0 4px 8px rgba(0,0,0,0.1); /* Ombre pour les éléments */
    }

    .modal-backdrop {
        display: block; /* Assure que l'arrière-plan sombre s'affiche même sans JS */
        opacity: 0.5 !important; /* Plus de transparence */
    }

    .modal.show .modal-dialog {
        transform: translate(0, 0); /* Ajustement pour les animations ou transitions */
    }

    .btn-primary, .btn-success, .btn-danger {
        border: none;
    }

    .btn:hover {
        opacity: 0.85; /* Effet au survol pour les boutons */
        box-shadow: 0 4px 12px rgba(0,0,0,0.2); /* Ombre plus prononcée au survol */
    }

    .btn-save {
        background-color: #ff5733; /* Couleur de sauvegarde */
        color: white;
    }

    .btn-close, .btn-add-new {
        background-color: #0b8699; /* Couleur pour fermer et ajouter */
        color: white;
    }

        .btn-save:hover, .btn-close:hover, .btn-add-new:hover {
            opacity: 0.85;
            box-shadow: 0 4px 12px rgba(0,0,0,0.2);
        }

    .table {
        background-color: #ffffff; /* Fond blanc pour la table pour mieux ressortir sur fond clair */
    }

        .table thead.thead-dark th {
            background: linear-gradient(to right, #343a40, #1c1e22); /* Gradient pour l'en-tête de la table */
            color: white;
        }

    .gradient-bg {
        background: linear-gradient(to right, #0b8699, #ff5733); /* Gradient pour l'en-tête de la page */
        color: white;
    }

    .border-radius {
        border-radius: 8px;
    }

    .box-shadow {
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
    }
</style>

<h3 class="text-center p-3 gradient-bg border-radius box-shadow">Rooms</h3>

<div class="container mt-4">
    <div class="row mb-4">
        <div class="col">
            <input type="text" class="form-control border-radius box-shadow" placeholder="Search by name" @bind="searchName" />
        </div>
        <div class="col">
            <input type="number" class="form-control border-radius box-shadow" placeholder="Search by park ID" @bind="searchParksId" />
        </div>
        <div class="col">
            <button class="btn btn-primary btn-custom border-radius" @onclick="SearchRooms">Search</button>
        </div>
    </div>

    <button class="btn btn-success my-2 btn-custom" @onclick="() => ShowModal(0)">Add New Room</button>

    <table class="table table-hover mt-4">
        <thead class="thead-dark">
            <tr>
                <th>Name</th>
                <th>ParksId</th>
                <th>Create Date</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
        @foreach (var room in rooms)
        {
            <tr>
                <td>@room.Name</td>
                <td>@room.ParksId</td>
                <td>@room.CreateDate</td>
                <td>
                    <button class="btn btn-primary btn-custom" @onclick="() => ShowModal(room.Id)">Edit</button>
                    <button class="btn btn-danger btn-custom" @onclick="() => ConfirmDelete(room.Id)">Delete</button>
                </td>
            </tr>
        }
        </tbody>
    </table>
</div>

@* Modals here *@
<EditRoomModal ModalTitle="Room Details" IsOpen="@isModalOpen" Room="@selectedRoom" OnClose="HandleModalClose" />

@code {
    private List<Rooms> rooms = new List<Rooms>();
    private bool isModalOpen = false;
    private Rooms selectedRoom = new Rooms();
    private string? searchName;
    private int? searchParksId;

    protected override async Task OnInitializedAsync()
    {
        rooms = await RoomService.GetAllRoomsAsync();
    }

    void ShowModal(int id)
    {
        if (id == 0)
        {
            selectedRoom = new Rooms(); // For add new
        }
        else
        {
            selectedRoom = rooms.FirstOrDefault(r => r.Id == id);
        }
        isModalOpen = true;
    }

    async Task HandleModalClose(bool isChanged)
    {
        if (isChanged)
        {
            rooms = await RoomService.GetAllRoomsAsync();
        }
        isModalOpen = false;
    }

    async Task ConfirmDelete(int id)
    {
        var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this room?");
        if (confirmed)
        {
            var result = await RoomService.DeleteRoomAsync(id);
            if (result == HttpStatusCode.OK)
            {
                rooms = await RoomService.GetAllRoomsAsync();
            }
        }
    }

    async Task SearchRooms()
    {
        rooms = await RoomService.SearchRoomsAsync(searchName, searchParksId);
    }
}